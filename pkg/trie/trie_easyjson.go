// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package trie

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4298c6f8DecodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie(in *jlexer.Lexer, out *Trie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "root":
			if in.IsNull() {
				in.Skip()
				out.Root = nil
			} else {
				if out.Root == nil {
					out.Root = new(Node)
				}
				(*out.Root).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4298c6f8EncodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie(out *jwriter.Writer, in Trie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"root\":"
		out.RawString(prefix[1:])
		if in.Root == nil {
			out.RawString("null")
		} else {
			(*in.Root).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trie) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4298c6f8EncodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4298c6f8EncodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trie) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4298c6f8DecodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4298c6f8DecodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie(l, v)
}
func easyjson4298c6f8DecodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie1(in *jlexer.Lexer, out *Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_end":
			out.IsEnd = bool(in.Bool())
		case "children":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Children).UnmarshalJSON(data))
			}
		case "children_recall":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ChildrenRecall = make(map[string]*Node)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *Node
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Node)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.ChildrenRecall)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(Node)
				}
				(*out.Parent).UnmarshalEasyJSON(in)
			}
		case "word":
			out.Word = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4298c6f8EncodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie1(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_end\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsEnd))
	}
	{
		const prefix string = ",\"children\":"
		out.RawString(prefix)
		out.Raw((in.Children).MarshalJSON())
	}
	{
		const prefix string = ",\"children_recall\":"
		out.RawString(prefix)
		if in.ChildrenRecall == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.ChildrenRecall {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		if in.Parent == nil {
			out.RawString("null")
		} else {
			(*in.Parent).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"word\":"
		out.RawString(prefix)
		out.String(string(in.Word))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Node) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4298c6f8EncodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Node) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4298c6f8EncodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Node) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4298c6f8DecodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Node) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4298c6f8DecodeGithubComM1i3k0e7DistributedSearchEnginePkgTrie1(l, v)
}
